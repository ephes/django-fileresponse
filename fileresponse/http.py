# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/01_http.ipynb (unless otherwise specified).

__all__ = ['AiofileFileResponse', 'AiobotocoreFileResponse', 'AWS_ACCESS_KEY_ID', 'AWS_SECRET_ACCESS_KEY']

# Cell

import time
import aiofiles


class AiofileFileResponse:
    headers = {"Content-Type": "application/octet-stream"}
    streaming = True
    _resource_closers = []
    is_async_fileresponse = True

    def __init__(self, path, chunk_size=4096):
        self.path = path
        self.chunk_size = chunk_size
        self.status_code = 200
        self.raw_headers = {}

    def get(self, header, alternate=None):
        return None

    async def stream(self, send):
        started_serving = time.perf_counter()
        await send(
            {
                "type": "http.response.start",
                "status": self.status_code,
                "headers": self.raw_headers,
            }
        )
        async with aiofiles.open(self.path, mode="rb") as file:  # type: ignore
            more_body = True
            while more_body:
                chunk = await file.read(self.chunk_size)
                more_body = len(chunk) == self.chunk_size
                await send(
                    {
                        "type": "http.response.body",
                        "body": chunk,
                        "more_body": more_body,
                    }
                )
        self.elapsed = time.perf_counter() - started_serving

# Cell

import aiobotocore

AWS_ACCESS_KEY_ID = "minioadmin"
AWS_SECRET_ACCESS_KEY = "minioadmin"


class AiobotocoreFileResponse:
    headers = {
        "Content-Type": "application/octet-stream"
    }
    streaming = True
    _resource_closers = []
    is_async_fileresponse = True
    minio = True

    def __init__(self, bucket, key, chunk_size=4096):
        self.bucket = bucket
        self.key = key
        self.chunk_size = chunk_size
        self.status_code = 200
        self.raw_headers = {}

    def get(self, header, alternate=None):
        return None

    async def stream(self, send):
        started_serving = time.perf_counter()
        session = aiobotocore.get_session()
        async with session.create_client(
            "s3",
            endpoint_url="http://localhost:9000",
            region_name="us-west-2",
            aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
            aws_access_key_id=AWS_ACCESS_KEY_ID,
            use_ssl=False
        ) as client:
            minio_response = await client.get_object(Bucket=self.bucket, Key=self.key)
            async with minio_response["Body"] as stream:
                await send({
                    "type": "http.response.start",
                    "status": self.status_code,
                    "headers": self.raw_headers,
                })
                chunks = []
                sent_size = 0

                more_body = True
                while more_body:
                    chunk = await stream.read(self.chunk_size)
                    chunk_len = len(chunk)
                    more_body = chunk_len > 0
                    chunks.append(chunk)
                    await send(
                        {
                            "type": "http.response.body",
                            "body": chunk,
                            "more_body": more_body,
                        }
                    )
                    sent_size += chunk_len
                print("sent size: ", sent_size)
        self.elapsed = time.perf_counter() - started_serving